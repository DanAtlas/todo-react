{"version":3,"sources":["components/Clock.js","App.js","serviceWorker.js","index.js","img/fireworks.svg"],"names":["Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tick","setState","hour","Date","toLocaleTimeString","state","date","toDateString","timer","setInterval","clearInterval","react_default","a","createElement","className","Component","App","todoList","tasks","addtodo","g","slice","push","deletetodo","i","d","splice","cleartodo","handleChange","e","target","value","_this2","o","map","key","onClick","components_Clock","type","placeholder","onChange","disabled","length","src","fireworks","alt","href","rel","aria-label","version","width","height","viewBox","aria-hidden","fill-rule","googl","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.bf6871d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Clock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hour: new Date().toLocaleTimeString(),\r\n      date: new Date().toDateString()\r\n    };\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.timer = setInterval(this.tick, 1000);\r\n  }\r\n\r\n  componentWillMount () {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  \r\n  tick = () => {\r\n    this.setState({hour: new Date().toLocaleTimeString()});\r\n  }\r\n  \r\n\r\n  render () {\r\n    return (\r\n      <p className=\"date-time\">\r\n        {this.state.hour} <br/> \r\n        {this.state.date}\r\n      </p>\r\n    )\r\n  }\r\n};\r\n\r\n\r\nexport default Clock;","import React, { Component } from 'react';\nimport './App.css';\nimport fireworks from './img/fireworks.svg';\nimport Clock from './components/Clock';\n\nclass App extends Component {\n  state = {\n    todoList: [],\n    tasks: ''\n  };\n\n  addtodo = () => {\n    let g = this.state.todoList.slice();\n    g.push(this.state.tasks)\n    this.setState ({\n      todoList: g,\n      tasks: ''\n    });\n  }\n  deletetodo = (i) => {\n    let d = this.state.todoList.slice();\n    d.splice(i,1);\n    this.setState ({\n      todoList: d,\n      tasks: ''\n    });\n  }\n  cleartodo = (i) => {\n    let d = this.state.todoList.slice();\n    d.splice(i,999);\n    this.setState ({\n      todoList: d,\n      tasks: ''\n    });\n  }\n  handleChange = (e) => {\n    this.setState ({\n      tasks:e.target.value\n    });\n  }\n  getInitialState() {\n    return {tasks: ''}\n  }\n  handleChange(e) {\n    this.setState({tasks: e.target.value})\n  }\n\n  render() {\n    let o = this.state.todoList.map((e,i) => {\n      return (\n        <li key={i}><p>{e}</p>\n          <button className=\"btn-delete\" \n            onClick={() => {this.deletetodo(i)}}>\n          </button>\n        </li>\n      );\n    });\n    return (\n      <div className=\"app\">\n        <h1>ToDo List App</h1>\n        <div className=\"todo-wrapper\">\n          <Clock />\n          <div className=\"form\">\n            <input type=\"text\"\n              placeholder=\"Enter your task...\"\n              value={this.state.tasks}\n              onChange={this.handleChange}\n              className=\"input-todo\"/>\n            <button className=\"btn btn-add\" \n              onClick={this.addtodo}\n              disabled={!this.state.tasks}> +\n            </button>\n          </div>\n          {this.state.todoList.length === 0 ? \n            <div className=\"status-free\">\n              <img src={fireworks} alt=\"fireworks\"/>\n              <h4>Chill time! You have no todos.</h4>\n            </div> :\n            <div className=\"wrap-todo-content\">\n              <ul>{o}</ul>\n              <div className=\"clear-todo\">\n                <div className=\"btn btn-clear\"\n                  onClick={() => {this.cleartodo()}}>\n                  Clear All\n                </div>\n              </div>\n            </div>\n          }\n        </div>\n        <div className=\"author\">\n          <a href=\"https://github.com/danatlas\" target=\"_blank\"\n            rel=\"noopener noreferrer\" className=\"btn-auth\" \n            aria-label=\"Follow @nourabusoud on GitHub\">\n            <svg version=\"1.1\" width=\"14\" height=\"14\" \n              viewBox=\"0 0 16 16\" className=\"octicon octicon-mark-github\" \n              aria-hidden=\"true\">\n              <path fill-rule=\"evenodd\" \n                d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\">\n              </path>\n            </svg>\n            <span googl=\"true\"> Follow @danatlas</span>\n          </a>\n          <br/>\n            <span className=\"git-auth\">\n              View on <a target=\"_blank\" rel=\"noopener noreferrer\" \n              href=\"https://github.com/DanAtlas/todo-react\">Github</a>\n            </span>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Clock from './components/Clock'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/fireworks.38f2ee9f.svg\";"],"sourceRoot":""}